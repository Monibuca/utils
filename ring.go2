package utils

import (
	"bytes"
	"sync"
	"time"
)

type RingItem[T interface{}] struct {
	T
	sync.WaitGroup
	*bytes.Buffer
	UpdateTime time.Time
}

// Ring 环形缓冲，使用数组实现
type Ring[T interface{}] struct {
	*RingItem[T]
	buffer []RingItem[T]
	Index  byte
}
func (r *Ring[T]) SubRing(index byte) *Ring[T]{
	result:= &Ring[T]{
		buffer:r.buffer,
	}
	result.GoTo(index)
	return result
}
// NewRing 创建Ring
func NewRing[T interface{}]() (r *Ring[T]) {
	r = &Ring[T]{
		buffer : make([]RingItem[T], 256),
		RingItem:&r.buffer[0],
	}
	r.Add(1)
	return
}
func (r *Ring[T]) offset(v byte) byte {
	return r.Index + v
}

// GoTo 移动到指定索引处
func (r *Ring[T]) GoTo(index byte) {
	r.Index = index
	r.RingItem = &r.buffer[index]
}

// GetAt 获取指定索引处的引用
func (r *Ring[T]) GetAt(index byte) *RingItem[T] {
	return &r.buffer[index]
}

// GetNext 获取下一个位置的引用
func (r *Ring[T]) GetNext() *RingItem[T] {
	return &r.buffer[r.offset(1)]
}

// GetLast 获取上一个位置的引用
func (r *Ring[T]) GetLast() *RingItem[T] {
	return &r.buffer[r.offset(-1)]
}

// GoNext 移动到下一个位置
func (r *Ring[T]) GoNext() {
	r.Index = r.offset(1)
	r.RingItem = &r.buffer[r.Index]
}

// GoBack 移动到上一个位置
func (r *Ring[T]) GoBack() {
	r.Index = r.offset(-1)
	r.RingItem = &r.buffer[r.Index]
}

// NextW 写下一个
func (r *Ring[T]) NextW() {
	item := r.RingItem
	item.UpdateTime = time.Now()
	r.GoNext()
	r.RingItem.Add(1)
	item.Done()
}

func (r *Ring[T]) GetBuffer() *bytes.Buffer {
	if r.Buffer == nil {
		r.Buffer = bytes.NewBuffer([]byte{})
	} else {
		r.Reset()
	}
	return r.Buffer
}

// Timeout 发布者是否超时了
func (r *Ring[T]) Timeout(t time.Duration) bool {
	// 如果设置为0则表示永不超时
	if t==0 {
		return false
	}
	return time.Since(r.UpdateTime) >t
}
